#include <stdio.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

#define    MAX_STR 105

#define    bool int32_t
#define true 1
#define false 0

bool send_int(int32_t socket, int32_t x) {
    x = htonl(x);
    int32_t nb = send(socket, (char*)&x, sizeof(int32_t), 0);
    if (nb != sizeof(int32_t)) {
        printf("Error on sending int32_t: %d bytes", nb);
        return true;
    }
    return false;
}

bool receive_int(int32_t socket, int32_t *x) {
    int32_t nb = recv(socket, (char*)x, sizeof(int32_t), 0);
    *x = ntohl(*x);
    if (nb != sizeof(int32_t)) {
        printf("Error on receiving int32_t: %d bytes", nb);
        return true;
    }
    return false;
}

bool send_str(int32_t socket, char *str) {
    int32_t len = strlen(str);
    send_int(socket, len);
    int32_t nb = send(socket, str, len, 0);
    if (nb != len) {
        printf("Error on sending string: %d bytes", nb);
        return true;
    }
    return false;
}

bool receive_str(int32_t socket, char *str) {
    memset(str, 0, MAX_STR);
    int32_t len;
    receive_int(socket, &len);
    int32_t nb = recv(socket, str, len, 0);
    if (nb != len) {
        printf("Error on receiving string: %d bytes", nb);
        return true;
    }
    return false;
}
void handle_communication(int32_t socket, struct sockaddr_in* server) {

}

int32_t main() {
    int32_t sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock < 0) {
        printf("Error on socket\n");
        return 1;
    }

    struct sockaddr_in server;
    memset(&server, 0, sizeof(server));
    server.sin_port = htons(8011);
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = inet_addr("127.0.0.1");

    if (connect(sock, (struct sockaddr *) &server, sizeof(server)) < 0) {
        printf("Eroare la conectarea la server\n");
        return 1;
    }

    handle_communication(sock, &server);

    close(sock);

    return 0;
}